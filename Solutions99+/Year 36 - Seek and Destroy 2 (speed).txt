-- 7 Billion Humans (2214M) --
-- 36: Seek and Destroy 2 --

mem1 = nearest wall
step n
mem2 = nearest wall
step n
mem3 = nearest wall
if mem1 == mem2:
	if mem2 == mem3:
		step n
		mem4 = nearest wall
		if mem3 == mem4:
			jump a
		else:
			mem1 = set c
			if mem1 == datacube:
				a:
				comment 0
				mem1 = nearest datacube
				step n
				mem2 = nearest datacube
				if mem2 < mem1:
					mem2 = set mem1
					mem1 = nearest datacube
				endif
				step n
				mem3 = nearest datacube
				if mem3 < mem1:
					mem3 = set mem2
					mem2 = set mem1
					mem1 = nearest datacube
				else:
					if mem3 < mem2:
						mem3 = set mem2
						mem2 = nearest datacube
					endif
				endif
				step n
				mem4 = nearest datacube
				if mem4 < mem1:
					mem3 = set mem2
					mem2 = set mem1
					mem1 = nearest datacube
				else:
					if mem4 < mem2:
						mem3 = set mem2
						mem2 = nearest datacube
					else:
						if mem4 < mem3:
							mem3 = nearest datacube
						endif
					endif
				endif
				step n
				mem4 = nearest datacube
				if mem4 < mem1:
					mem3 = set mem2
					mem2 = set mem1
					mem1 = nearest datacube
				else:
					if mem4 < mem2:
						mem3 = set mem2
						mem2 = nearest datacube
					else:
						if mem4 < mem3:
							mem3 = nearest datacube
						endif
					endif
				endif
				step n
				mem4 = nearest datacube
				if mem4 < mem1:
					mem3 = set mem2
					mem2 = set mem1
					mem1 = nearest datacube
				else:
					if mem4 < mem2:
						mem3 = set mem2
						mem2 = nearest datacube
					else:
						if mem4 < mem3:
							mem3 = nearest datacube
						endif
					endif
				endif
				step n
				mem4 = nearest datacube
				if mem4 < mem1:
					mem3 = set mem2
					mem2 = set mem1
					mem1 = nearest datacube
				else:
					if mem4 < mem2:
						mem3 = set mem2
						mem2 = nearest datacube
					else:
						if mem4 < mem3:
							mem3 = nearest datacube
						endif
					endif
				endif
				jump b
			else:
				step n
				mem1 = nearest wall
				if mem1 == mem4:
					step n
				endif
			endif
		endif
	endif
else:
	if mem2 == mem3:
		mem1 = nearest datacube
		step n
		jump c
	else:
		step n
		mem1 = set c
		if mem1 == datacube:
		else:
			step n
		endif
	endif
endif
mem1 = nearest datacube
step n
mem2 = nearest datacube
if mem2 < mem1:
	mem2 = set mem1
	mem1 = nearest datacube
endif
step n
mem3 = nearest datacube
if mem3 < mem2:
	mem3 = set mem2
	mem2 = nearest datacube
	if mem2 < mem1:
		mem2 = set mem1
		mem1 = nearest datacube
	endif
endif
step n
mem4 = nearest datacube
d:
if mem4 < mem1 or
 mem1 != datacube:
	mem3 = set mem2
	mem2 = set mem1
	mem1 = nearest datacube
else:
	if mem4 < mem2 or
	 mem2 != datacube:
		mem3 = set mem2
		mem2 = nearest datacube
	else:
		if mem4 < mem3 or
		 mem3 != datacube:
			mem3 = nearest datacube
		endif
	endif
endif
c:
e:
mem4 = set n
if mem4 == datacube or
 mem4 == nothing:
	step n
	if mem4 == nothing:
		jump e
	endif
	jump d
endif
b:
mem4 = nearest shredder
pickup mem1
giveto mem4
pickup mem2
giveto mem4
pickup mem3
giveto mem4
comment 1
f:
step n
mem1 = set n
if mem1 == nothing:
	jump f
endif
g:
step n
mem2 = set n
if mem2 == nothing:
	jump g
endif
if mem2 == wall:
	pickup mem1
	jump h
endif
if mem2 < mem1:
	mem4 = set mem2
	mem2 = set mem1
	mem1 = set mem4
endif
i:
step n
mem3 = set n
if mem3 == nothing:
	jump i
endif
if mem3 == wall:
	pickup mem1
	mem1 = set mem2
	jump j
endif
if mem3 < mem1:
	mem4 = set mem3
	mem3 = set mem2
	mem2 = set mem1
	mem1 = set mem4
else:
	if mem3 < mem2:
		mem4 = set mem3
		mem3 = set mem2
		mem2 = set mem4
	endif
endif
k:
step n
mem4 = set n
if mem4 == nothing:
	jump k
endif
if mem4 < mem1:
	pickup n
else:
	pickup mem1
	mem1 = nearest shredder
	giveto mem1
	if mem4 < mem2:
		pickup mem4
		giveto mem1
		pickup mem2
		giveto mem1
		pickup mem3
	else:
		pickup mem2
		giveto mem1
		if mem4 < mem3:
			pickup mem4
			giveto mem1
			pickup mem3
		else:
			pickup mem3
			giveto mem1
			pickup mem4
		endif
	endif
	giveto mem1
endif
j:
h:
mem4 = nearest shredder
giveto mem4
pickup mem1
giveto mem4
pickup mem2
giveto mem4
pickup mem3
giveto mem4


DEFINE COMMENT 0
eJztkM1KQlEUhb/nkaQmOaibRUXDBuEgpFE0ihQLMQvThcSl/xyEg4gIiYi6gQ10ICWVNuitWtpTBG74
OPts9tpnnZ0CNMacSROjYKrEkcYpKUGJKd8DjjTDFUkiBTQ1TZsEfcXoM9DHWWSCeU2aWZJacOegHnIh
cUaZUAXP2yarLOvKsGZSzpe1Y03eFKzZI1DJr5WdV1yrsOIz7XqRXXvJE5LzzAx35k05PlQ0+3R1QNv9
kXm04xtVqesYDXxwyb3OrTnlVidc21ddh9SGHnv20GVTLf/vlQee//7EJ0tEQ1b1woaabNHxXvrU9EPD
RPr2Hnp09E6XFl88mVGM4p/FL5ehZTs;

DEFINE COMMENT 1
eJztkEFLQkEUhb+fUQQtalFtrEVGiBqItRIXbcq3iDB9FLlwUdLC6hDRIlpIRET4XiKh9Cho2c/r+PoV
gWf4mMuZe+/cmV2sGXKmz19cZI5NFllnyaxQ1jL7jg+1QIN5WpqlPUlVgbxXhSxXrJGwyk/ao8AOW1RV
5kzb3JqXND/LvTa4c01XJTo+76T+HhXTUo2eiVMvINCB/brvb1ImpErT9x/Rtt8lcI+68xv07D8p5FnH
9HXCkFNGJklnuaFkeml8TlGX5HXt9z6YiSLPHzkn9lTvfsWIDB9k9ElOX4TeL5R45jGPGjBQ5P6x/+qN
Vw3N2PG3K6ea6p/qF/TSS/k;

